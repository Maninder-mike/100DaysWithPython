# Basices of lambda expressions

def make_incrementor(n):
    return lambda x: x + n


f = make_incrementor(5)
f1 = make_incrementor(5)
print(f(2))
print(f1(0))

# ----------------------------------------------------------
# small lambda function as a argument:

pairs = [(1, 'one'), (2, 'two'), (3, 'three')]
pairs.sort(key=lambda pair: pair[1])
print(pairs)

# ----------------------------------------------------------
# Both functions are same

add_one = lambda i: i + 1

def add_one1(i):
	return i + 1

print(add_one(1))
print(add_one1(1))

# ----------------------------------------------------------
info = lambda first, last: f"Full Name: {first.title()} {last.title()}"
print(info('maninder','singh'))

# ----------------------------------------------------------
# Anonymous function on shell
# >>>lambda x, y: x + y
# >>>_(1,2)
print((lambda x, y: x + y)(2, 3))

high_ord_func = lambda x, func: x + func(x)
print(high_ord_func(2, lambda x: x * x))
print(high_ord_func(2, lambda x: x + 3))

# ----------------------------------------------------------
# The dis module exposes functions to analyze Python bytecode generated by the Python compiler:
import dis
add = lambda x, y: x + y

print(dis.dis(add))
print(dis.dis(high_ord_func))

# ----------------------------------------------------------
odd_even = lambda x: (x % 2 and 'odd' or 'even')
print(odd_even(5))
print(odd_even(556))
print(odd_even(500343))
# ----------------------------------------------------------
# Annotations
def full_name(first: str, last: str) -> str:
	return f"{first.upper()} {last.upper()}"
print(full_name('maninder','singh'))

# ----------------------------------------------------------
# *args, **kwargs

arg_sum = lambda *args: sum(args)
kwargs_sum = lambda **kwargs: sum(kwargs.values())

print(arg_sum(1,2,3,4,5))
print(kwargs_sum(one=1, two=2,three=3))

#  ----------------------------------------------------------
numbers = 'one', 'two', 'three', 'four'
funcs = []
for n in numbers:
	funcs.append(lambda n=n: print(n))

for f in funcs:
	f()

#  ----------------------------------------------------------

cryptic_style = lambda _: list(map(lambda _: _ // 2, _))
print(cryptic_style([1,2,3,4,5,6,7,8,9]))

#  ----------------------------------------------------------
upper_list = list(map(lambda x: x.upper(), ['one','two','three','four']))
print(upper_list)

print([x.upper() for x in ['one','two','three','four']])

filter_list = list(filter(lambda x: 'o' in x, ['one','two','three','four']))
print(filter_list)

#  ----------------------------------------------------------
from functools import reduce
reduce_list = reduce(lambda acc, x: f'{acc} | {x}', ['one','two','three','four'])
print(reduce_list)

#  ----------------------------------------------------------
ids = ['id2', 'id200', 'id22', 'id12', 'id32', 'id25', 'id35']
sorted_list = sorted(ids, key=lambda x: int(x[2:])) # Interger sort
print(sorted_list)

#  ----------------------------------------------------------
from math import factorial
from timeit import timeit

print(timeit("factorial(999)", "from math import factorial", number=10))

print(timeit(lambda : factorial(999), number=10))

#  ----------------------------------------------------------
